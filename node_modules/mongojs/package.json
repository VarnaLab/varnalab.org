{
  "name": "mongojs",
  "description": "a simple mongo module that implements the mongo api",
  "keywords": [
    "mongo",
    "db",
    "mongodb"
  ],
  "version": "0.6.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/gett/mongojs.git"
  },
  "author": {
    "name": "Ge.tt",
    "email": "hello@ge.tt"
  },
  "contributors": [
    {
      "name": "Mathias Buus Madsen",
      "email": "m@ge.tt"
    },
    {
      "name": "Ian Jorgensen",
      "email": "i@ge.tt"
    }
  ],
  "dependencies": {
    "mongodb": "1.x.x"
  },
  "scripts": {
    "test": "node ./tests"
  },
  "readme": "# mongojs\nA [node.js](http://nodejs.org) module for mongodb, that emulates [the official mongodb API](http://www.mongodb.org/display/DOCS/Home) as much as possible. It wraps [mongodb-native](https://github.com/christkv/node-mongodb-native/).\nIt is available through npm:\n\n\tnpm install mongojs\n\n## Usage\n\nmongojs is very simple to use:\n\n``` js\nvar mongojs = require('mongojs');\nvar db = mongojs(connectionString, [collections]);\n```\n\nThe connection string should follow the format desribed in [the mongo connection string docs](http://docs.mongodb.org/manual/reference/connection-string/).\nSome examples of this could be:\n\n``` js\n// simple usage for a local db\nvar db = mongojs('mydb', ['mycollection']);\n\n// the db is on a remote server (the port default to mongo)\nvar db = mongojs('example.com/mydb', ['mycollection']);\n\n// we can also provide some credentials\nvar db = mongojs('username:password@example.com/mydb', ['mycollection']);\n\n// connect now, and worry about collections later\nvar db = mongojs('mydb');\nvar mycollection = db.collection('mycollection');\n```\n\nAfter we connected we can query or update the database just how we would using the mongo API with the exception that we use a callback\nThe format for callbacks is always `callback(error, value)` where error is null if no exception has occured.\n\n``` js\n// find everything\ndb.mycollection.find(function(err, docs) {\n\t// docs is an array of all the documents in mycollection\n});\n\n// find everything, but sort by name\ndb.mycollection.find().sort({name:1}, function(err, docs) {\n\t// docs is now a sorted array\n});\n\n// iterate over all whose level is greater than 90.\ndb.mycollection.find({level:{$gt:90}}).forEach(function(err, doc) {\n\tif (!doc) {\n\t\t// we visited all docs in the collection\n\t\treturn;\n\t}\n\t// doc is a document in the collection\n});\n\n// find all named 'mathias' and increment their level\ndb.mycollection.update({name:'mathias'}, {$inc:{level:1}}, {multi:true}, function(err) {\n\t// the update is complete\n});\n\n// use the save function to just save a document (the callback is optional for all writes)\ndb.mycollection.save({created:'just now'});\n```\n\nFor more detailed information about the different usages of update and quering see [the mongo docs](http://www.mongodb.org/display/DOCS/Manual)\n\n## Replication Sets\n\nMongojs can also connect to a mongo replication set by providing a connection string with multiple hosts\n\n``` js\nvar db = mongojs('rs-1.com,rs-2.com,rs-3.com/mydb?slaveOk=true', ['mycollection']);\n```\n\nFor more detailed information about replica sets see [the mongo replication docs](http://www.mongodb.org/display/DOCS/Replica+Sets)\n",
  "readmeFilename": "README.md",
  "_id": "mongojs@0.6.2",
  "_from": "mongojs@latest"
}
