{
  "author": {
    "name": "Jan Muehlemann",
    "email": "jan.muehlemann@gmail.com"
  },
  "name": "i18next",
  "description": "i18n made easy - full featured: middleware, template support plus clientside use",
  "version": "1.5.10",
  "repository": {
    "type": "git",
    "url": "git://github.com/jamuhl/i18next-node.git"
  },
  "private": false,
  "main": "index.js",
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "cookies": ">= 0.2.2"
  },
  "devDependencies": {
    "mocha": ">= 0.10.2",
    "expect.js": ">=0.0.1",
    "sinon": ">=0.0.1",
    "supertest": ">=0.0.1",
    "express": ">=0.0.1",
    "jade": ">=0.0.1"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "# Introduction\n\n[![Build Status](https://secure.travis-ci.org/jamuhl/i18next-node.png)](http://travis-ci.org/jamuhl/i18next-node)\n\nProject goal is to provide the same easy way to translate a website on serverside like in \n[i18next](https://github.com/jamuhl/i18next) on the clientside:\n\n- Translation inside your server code or template\n- loading resourcefiles\n- update resourcefiles with missing strings\n- interpolation, plurals, nesting or resources\n- serve the same resources to the clientside\n\n# installation\n\n\tnpm install i18next\n\n# usage\n\nFirst require the module and init i18next:\n\n\tvar i18next = require('i18next');\n\ti18next.init(); // for options see i18next-node gh-page\n\nRegister the express middleware, so we can check current language settings:\n\n\t// Configuration\n\tapp.configure(function() {\n\t    app.use(express.bodyParser());\n\t    app.use(i18next.handle);\n\t    app.use(app.router);\n\n\t    [...]\n\t});\n\nRegister AppHelper so you can use the translate function in your template:\n\n\ti18next.registerAppHelper(app)\n\nNow you can (depending on your template language) do something like this in you template:\n\n\t// sample in jade\n\tbody\n        span= t('app.name')\n\nTo serve the clientside script and needed routes for resources and missing keys:\n\n\ti18next.serveClientScript(app)\n\t    .serveDynamicResources(app)\n\t    .serveMissingKeyRoute(app);\n\nnow you can add the script to you page and use i18next on the client like on the server:\n\n\tscript(src='i18next/i18next.js', type='text/javascript')\n\n    $.i18n.init([options], function() { \n        $('#appname').text($.t('app.name'));\n    });\n\nfor more information on clientside usage have a look at [i18next](http://jamuhl.github.com/i18next/)\n\n# sample\n\n- [i18next-node_Sample](https://github.com/jamuhl/i18next-node/tree/master/sample)\n\n# License\n\nCopyright (c) 2011 Jan MÃ¼hlemann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "i18next@1.5.10",
  "_from": "i18next@1.5.10"
}
