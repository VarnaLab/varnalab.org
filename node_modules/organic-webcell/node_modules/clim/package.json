{
  "name": "clim",
  "description": "Console.Log IMproved",
  "tags": [
    "simple",
    "util",
    "utility"
  ],
  "version": "1.0.0",
  "author": {
    "name": "Esa-Matti Suuronen",
    "email": "esa-matti@suuronen.org"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/epeli/node-clim.git"
  },
  "bugs": {
    "url": "http://github.com/epeli/node-clim/issues"
  },
  "main": "./index",
  "scripts": {
    "test": "node test.js"
  },
  "readme": "# Console.Log IMproved - clim\n\nA little Node.js module which improves the behavior of the logging methods of the\n`console` object without changing its API. Just drop it in.\n\n\n## Improvements\n\nImprovements affect only `log`, `info`, `warn` and `error` methods.\n\n  - Add timestamp\n  - Add log level LOG/INFO/WARN/ERROR\n  - Always log to stderr\n  - Allow prefixing and inheriting\n\n## Installation\n\n    npm install clim\n\n## Usage\n\n### Function Signature\n\n_Object_ newconsole = clim( [_String_ prefix], [_Object_ parent], [_Boolean_ patch parent] )\n\nAll parameters are optional.\n\nJust shadow the original `console` object and use it like always:\n\n```javascript\nvar console = require(\"clim\")();\nconsole.log(\"message\");\nconsole.info(\"message\");\nconsole.warn(\"message\");\nconsole.error(\"message\");\n```\n\n\nOr if you want process wide improved console object you can monkeypatch the\noriginal object by passing it and `true` to `clim`:\n\n\n```javascript\nrequire(\"clim\")(console, true);\nconsole.log(\"message\");\n```\n\n### Prefix Inheriting\n\nAdd prefix to your log messages by passing it as the first argument:\n\n```javascript\nvar console = require(\"clim\")(\"myapp\");\nconsole.log(\"message\");\n```\n\n    Sun Sep 30 2012 16:45:57 GMT+0300 (EEST) INFO myapp message\n\n\nInherit prefixes from some other console object by passing it as the second\nparameter:\n\n```javascript\nvar clim = require(\"clim\");\n\nvar console = clim(\"myapp\");\nconsole.log(\"message\");\n\nfunction somefunc(){\n  var logger = clim(\"somefunc\", console);\n  logger.warn(\"in function\");\n}\n\nsomefunc();\n```\n\n    Sun Sep 30 2012 16:59:12 GMT+0300 (EEST) INFO myapp message\n    Sun Sep 30 2012 16:59:12 GMT+0300 (EEST) WARNING myapp somefunc in function\n\n### Customizing\n\n\nChange date format by overriding `getTime`:\n\n```javascript\nclim.getTime = function(){\n  return new Date().toString();\n};\n```\n\nChange global log target and formatting details by overriding `logWrite`:\n\n```javascript\nclim.logWrite = function(level, prefixes, msg) {\n  // Default implementation writing to stderr\n  var line = clim.getTime() + \" \" + level;\n  if (prefixes.length > 0) line += \" \" + prefixes.join(\" \");\n  line += \" \" + msg;\n  process.stderr.write(line + \"\\n\");\n\n  // or post it web service, save to database etc...\n};\n```\n\n\n## Design Philosophies\n\n  - Keep the same api as in the original [console](http://nodejs.org/api/stdio.html) object\n  - Small\n  - No dependecies\n  - Tests\n  - MIT Licensed\n\n",
  "readmeFilename": "README.md",
  "_id": "clim@1.0.0",
  "_from": "clim@1.0.0"
}
